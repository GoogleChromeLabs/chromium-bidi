/**
 * Copyright 2025 Google LLC.
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * THIS FILE IS AUTOGENERATED by cddlconv 0.1.6.
 * Run `node tools/generate-bidi-types.mjs` to regenerate.
 * @see https://github.com/w3c/webdriver-bidi/blob/master/index.bs
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck Some types may be circular.

import z from 'zod';

export const SpeculationCommandSchema = z.lazy(() => z.object({}));

export namespace Speculation {
  export const PrefetchStatusSchema = z.lazy(() =>
    z.enum(['pending', 'running', 'success', 'failure']),
  );
}

export const SpeculationEventSchema = z.lazy(() =>
  z.union([Speculation.PrefetchStatusUpdatedSchema]),
);

export namespace Speculation {
  export const PrefetchStatusUpdatedSchema = z.lazy(() =>
    z.object({
      method: z.literal('speculation.prefetchStatusUpdated'),
      params: Speculation.PrefetchStatusUpdatedParametersSchema,
    }),
  );
}

export namespace Speculation {
  export const PrefetchStatusUpdatedParametersSchema = z.lazy(() =>
    z.object({
      context: z.string(),
      initiatingFrameId: z.number().int().nonnegative(),
      url: z.string(),
      status: Speculation.PrefetchStatusSchema,
    }),
  );
}
